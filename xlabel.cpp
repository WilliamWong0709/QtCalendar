#include "xlabel.h"

//#include <QtWidgets/qboxlayout.h>
//#include <QtWidgets/qgroupbox.h>
#include <QDebug>
#include <QString>

extern QMap<QDate, QMap<QTime, QString> > gSchedules;

XLabel::XLabel(QWidget *parent, Qt::WindowFlags f)
	: QLabel(parent, f),
	mDate(QDate()),
	//mDaySchedule(QMap<QString, QString>()),
	mTime(QTime()),
	mActivityStr(QString()),
	mDayScheduleUiVec(QVector<DayScheduleUi *>()),
	mModifyBtnVec(QVector<QPushButton*>()),
	mDeleteBtnVec(QVector<QPushButton*>()),
	//mSignalMapper(new QSignalMapper(this)),
	mTimeEdit(nullptr),
	mLineEdit(nullptr),
	mSaveBtn(nullptr),
	mCancelBtn(nullptr),
	mEditDayScheduleDlg(nullptr),
	mChangeDlg(nullptr),
	mGrpBox(nullptr),
	mBtnStyleSheet1(QString("font:bold;border:1px solid gray;border-radius:4px;"))
{
}

XLabel::XLabel(const QString &text, QWidget *parent, Qt::WindowFlags f)
	: QLabel(text, parent, f),
	mDate(QDate()),
	//mDaySchedule(QMap<QString, QString>()),
	mTime(QTime()),
	mActivityStr(QString()),
	mDayScheduleUiVec(QVector<DayScheduleUi *>()),
	mModifyBtnVec(QVector<QPushButton*>()),
	mDeleteBtnVec(QVector<QPushButton*>()),
	//mSignalMapper(new QSignalMapper(this)),
	mTimeEdit(nullptr),
	mLineEdit(nullptr),
	mSaveBtn(nullptr),
	mCancelBtn(nullptr),
	mEditDayScheduleDlg(nullptr),
	mChangeDlg(nullptr),
	mGrpBox(nullptr),
	mBtnStyleSheet1(QString("font:bold;border:1px solid gray;border-radius:4px;"))
{
}

void XLabel::mouseReleaseEvent(QMouseEvent *e)
{
	if (e->button() == Qt::LeftButton && !this->text().isEmpty()) {
		editDaySchedule();
	}
}

void XLabel::editDaySchedule()
{
	mEditDayScheduleDlg = new XDialog(nullptr);
	mEditDayScheduleDlg->init(this, mDate);

	QVBoxLayout *vLayout = new QVBoxLayout;
	QGridLayout *topGridLayout = new QGridLayout;

	QPushButton *closeBtn = new QPushButton(mEditDayScheduleDlg);
	closeBtn->setText("Close");
	closeBtn->setFixedSize(110, 40);
	closeBtn->setStyleSheet(mBtnStyleSheet1);
	connect(closeBtn, SIGNAL(clicked()), this, SLOT(closeDlg()));
	topGridLayout->addWidget(closeBtn, 0, 0, Qt::AlignLeft);

	QPushButton *createBtn = new QPushButton(mEditDayScheduleDlg);
	createBtn->setText("Create");
	createBtn->setFixedSize(110, 40);
	createBtn->setStyleSheet(mBtnStyleSheet1);
	connect(createBtn, SIGNAL(clicked()), this, SLOT(changeActivity()));
	topGridLayout->addWidget(createBtn, 0, 1, Qt::AlignRight);

	vLayout->addLayout(topGridLayout);

	mGrpBox = new QGroupBox(tr("Activities"));
	QGridLayout *gridLayout = new QGridLayout;
	mGrpBox->setLayout(gridLayout);
	updateDaySchedule();
	vLayout->addWidget(mGrpBox, 1, Qt::AlignCenter);

	mEditDayScheduleDlg->setLayout(vLayout);
	mEditDayScheduleDlg->resize(800, 1000);
	mEditDayScheduleDlg->exec();
}

void XLabel::updateDaySchedule()
{
	/* Clear the UI generated by last invoke of updateDaySchedule() */
	for (auto sui : mDayScheduleUiVec) {
		delete sui;
	}
	mDayScheduleUiVec.clear();

	if (gSchedules.find(mDate) == gSchedules.end())
		return;

	QGridLayout *gridLayout = static_cast<QGridLayout *>(mGrpBox->layout());
	
	mModifyBtnVec.clear();
	mDeleteBtnVec.clear();
	int i = 0;
	for (auto it = gSchedules[mDate].begin(); it != gSchedules[mDate].end();it++, i++) {
		//mDaySchedule.insert(it.key(), it.value());
		QLabel *timeLabel = new QLabel(it.key().toString(QString("hh:mm:ss")), this);
		QLabel *activityLabel = new QLabel(it.value(), this);
		QPushButton *modifyBtn = new QPushButton(tr("Modify"), this);
		mModifyBtnVec.push_back(modifyBtn);
		QPushButton *deleteBtn = new QPushButton(tr("Delete"), this);
		mDeleteBtnVec.push_back(deleteBtn);

		DayScheduleUi *sui = new DayScheduleUi(timeLabel, activityLabel, mModifyBtnVec.last(), mDeleteBtnVec.last());
		mDayScheduleUiVec.push_back(sui);

		connect(modifyBtn, SIGNAL(clicked(bool)), this, SLOT(modifyActivity()));
		connect(deleteBtn, SIGNAL(clicked(bool)), this, SLOT(deleteActivity()));

		gridLayout->addWidget(timeLabel, i, 0);
		gridLayout->addWidget(activityLabel, i, 1);
		gridLayout->addWidget(mModifyBtnVec.last(), i, 2);
		gridLayout->addWidget(mDeleteBtnVec.last(), i, 3);
	}

	//qDebug() << "In updateDaySchedule(). mDayScheduleMap.size() = " << mDayScheduleMap.size();
}

void XLabel::changeActivity()
{
	initChangeDlg(QTime::currentTime(), QString(""));

	connect(mTimeEdit, SIGNAL(timeChanged(const QTime &)), this, SLOT(updateStr()));
	connect(mLineEdit, SIGNAL(textChanged(const QString &)), this, SLOT(updateStr()));
	connect(mSaveBtn, SIGNAL(clicked(bool)), this, SLOT(insertActivity()));
	connect(mCancelBtn, SIGNAL(clicked(bool)), this, SLOT(cancelInsertActivity()));

	mChangeDlg->resize(400, 400);
	mChangeDlg->exec();
}

void XLabel::initChangeDlg(QTime currentTime, QString ActStr)
{
	mChangeDlg = new QDialog(nullptr);
	QGridLayout *gridLayout = new QGridLayout;

	mSaveBtn = new QPushButton(mChangeDlg);
	mSaveBtn->setDisabled(true);
	mSaveBtn->setText("Save");
	mSaveBtn->setFixedSize(110, 40);
	mSaveBtn->setStyleSheet(mBtnStyleSheet1);
	gridLayout->addWidget(mSaveBtn, 0, 1, Qt::AlignRight);

	mCancelBtn = new QPushButton(mChangeDlg);
	mCancelBtn->setText("Cancel");
	mCancelBtn->setFixedSize(110, 40);
	mCancelBtn->setStyleSheet(mBtnStyleSheet1);
	gridLayout->addWidget(mCancelBtn, 0, 0, Qt::AlignLeft);

	gridLayout->addWidget(new QLabel(tr("Time"), mChangeDlg), 1, 0);
	mTimeEdit = new QTimeEdit(currentTime, mChangeDlg);
	gridLayout->addWidget(mTimeEdit, 1, 1);
	gridLayout->addWidget(new QLabel(tr("Activity"), mChangeDlg), 2, 0);
	mLineEdit = new QLineEdit(mChangeDlg);
	mLineEdit->setText(ActStr);
	gridLayout->addWidget(mLineEdit, 2, 1);
	mChangeDlg->setLayout(gridLayout);

	mTime = currentTime;
	mActivityStr = ActStr;
}



void XLabel::closeDlg()
{
	if(mEditDayScheduleDlg)
		mEditDayScheduleDlg->close();
}

void XLabel::dayScheduleSaveChange()
{
	
}

void XLabel::insertActivity()
{
	if (gSchedules.find(mDate) == gSchedules.end())
		gSchedules.insert(mDate, QMap<QTime, QString>());

	gSchedules[mDate].insert(mTime, mActivityStr);
	if(mChangeDlg)
		mChangeDlg->close();
	updateDaySchedule();
}

void XLabel::cancelInsertActivity()
{
	if(mChangeDlg)
		mChangeDlg->close();
}

void XLabel::modifyActivity()
{
	QPushButton *btn = static_cast<QPushButton *>(sender());
	int index = mModifyBtnVec.indexOf(btn);

	if (gSchedules.find(mDate) != gSchedules.end() && index >= 0 && index < gSchedules[mDate].size()) {
		auto it = gSchedules[mDate].begin() + index;

		initChangeDlg(it.key(), it.value());

		deleteActivitySilently(index);

		connect(mTimeEdit, SIGNAL(timeChanged(const QTime &)), this, SLOT(updateStr()));
		connect(mLineEdit, SIGNAL(textChanged(const QString &)), this, SLOT(updateStr()));
		connect(mSaveBtn, SIGNAL(clicked(bool)), this, SLOT(insertActivity()));
		connect(mCancelBtn, SIGNAL(clicked(bool)), this, SLOT(insertActivity()));

		mChangeDlg->resize(400, 400);
		mChangeDlg->exec();
	}
}

void XLabel::deleteActivity()
{
	QPushButton *btn = static_cast<QPushButton *>(sender());
	int index = mDeleteBtnVec.indexOf(btn);
	deleteActivitySilently(index);
	updateDaySchedule();
}

void XLabel::deleteActivitySilently(int index)
{
	if (gSchedules.find(mDate) != gSchedules.end() && index >= 0 && index < gSchedules[mDate].size()) {
		gSchedules[mDate].erase(gSchedules[mDate].begin() + index);
		if (gSchedules[mDate].isEmpty()) {
			gSchedules.remove(mDate);
		}
	}
}


void XLabel::updateStr()
{
	//qDebug() << "In updateStr()";

	mTime = mTimeEdit->time();
	mActivityStr = mLineEdit->text().trimmed();
	
	mSaveBtn->setDisabled(!mTime.isValid() || mActivityStr.isEmpty());
}
